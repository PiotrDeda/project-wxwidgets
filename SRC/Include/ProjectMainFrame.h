#ifndef __ProjectMainFrame__
#define __ProjectMainFrame__

/**
@file
Subclass of MainFrame, which is generated by wxFormBuilder.
*/

#include "Project.h"

//// end generated include

#include <wx/dcbuffer.h>
#include <wx/dcclient.h>
#include <wx/dcmemory.h>
#include "Console.h"
#include "Presentation.h"
#include "ShapeContainer.h"

/** Implementing MainFrame */
class ProjectMainFrame : public MainFrame
{
protected:
	// Handlers for MainFrame events.
	void MainFrameOnClose(wxCloseEvent& event);
	void MainFrameOnPaint(wxPaintEvent& event);
	void _promptFieldOnTextEnter(wxCommandEvent& event);
public:
	/** Constructor */
	ProjectMainFrame(wxWindow* parent);
	//// end generated class members

protected:
	Console* m_console;
	ShapeContainer* m_shapeContainer;

public:
	void Unimplemented();
	void Draw();

	// Komendy podstawowe

	/**
	 * @brief set_line_color c
	 */
	void SetLineColor(std::vector<std::string> arguments);

	/**
	 * @brief line (x1,y1,z1) (x2,y2,z2)
	 */
	void CreateLine(std::vector<std::string> arguments);

	/**
	 * @brief box (x1,y2,z1) (x2,y2,z2)
	 */
	void CreateBox(std::vector<std::string> arguments);

	/**
	 * @brief sphere (x,y,z) r (n,m)
	 */
	void CreateSphere(std::vector<std::string> arguments);

	/**
	 * @brief cone (x1,y1,z1) r1 (x2,y2,z2) r2 n
	 */
	void CreateCone(std::vector<std::string> arguments);

	/**
	 * @brief cylinder (x1,y1,z1) (x2,y2,z2) r n
	 */
	void CreateCylinder(std::vector<std::string> arguments);

	/**
	 * @brief delete id
	 */
	void Delete(std::vector<std::string> arguments);

	/**
	 * @brief clear_all
	 */
	void ClearAll(std::vector<std::string> arguments);

	/**
	 * @brief move id (x,y,z)
	 */
	void Move(std::vector<std::string> arguments);

	/**
	 * @brief rotate id (x,y,z) (α,β,γ)
	 */
	void Rotate(std::vector<std::string> arguments);

	/**
	 * @brief save name
	 */
	void Save(std::vector<std::string> arguments);

	/**
	 * @brief load name
	 */
	void Load(std::vector<std::string> arguments);

	// Komendy rozszerzone

	/**
	 * @brief Niezaimplementowana.
	 */
	void RenderToFile(std::vector<std::string> arguments);

	/**
	 * @brief Niezaimplementowana.
	 */
	void SetFillStyle(std::vector<std::string> arguments);

	/**
	 * @brief Niezaimplementowana.
	 */
	void SetFillColor(std::vector<std::string> arguments);

	/**
	 * @brief Niezaimplementowana.
	 */
	void View(std::vector<std::string> arguments);

	/**
	 * @brief set_view_range right | front | top r
	 */
	void SetViewRange(std::vector<std::string> arguments);

	/**
	 * @brief Niezaimplementowana.
	 */
	void CameraLookAt(std::vector<std::string> arguments);

	/**
	 * @brief camera_at (x,y,z)
	 */
	void CameraAt(std::vector<std::string> arguments);

	/**
	 * @brief camera_fov alfa
	 */
	void CameraFov(std::vector<std::string> arguments);

	/**
	 * @brief Niezaimplementowana.
	 */
	void Touch(std::vector<std::string> arguments);

	// Komendy debugowania

	/**
	 * @brief debug_scale s
	 */
	void DebugScale(std::vector<std::string> arguments);

	/**
	 * @brief debug_culling true | false
	 */
	void DebugCulling(std::vector<std::string> arguments);
};

#endif // __ProjectMainFrame__
